!function () {
    let e = function () { let e = null, i = null, n = null, t = null, r = { WaitingForScan: "WaitingForScan", Timeout: "Timeout", Scanned: "Scanned", Approved: "Approved", RejectedByUser: "RejectedByUser", RejectedByRequirement: "RejectedByRequirement" }, c = { [r.Timeout]: "<div class='message'>QR code expired.</div><a href='#' id='new-qr-button' class='button secondary'>New QR</a>", [r.Scanned]: "<div class='spinner'></div><div class='message'>Scanning in progress...</div>", [r.Approved]: "<div class='checkmark'></div><div class='message w-100'>CHAIN<span class='green-text'>IT</span> ID</div><div class='label w-100'>Your age was validated. You will gain access in 10 seconds</div>", [r.RejectedByUser]: "<div class='cross'></div><div class='message denied'>Access Denied</div>", [r.RejectedByRequirement]: "<div class='cross'></div><div class='message denied'>Access Denied</div>" }; function a(e, i) { setTimeout(() => { window.location.href = e }, i) } return { _handleState: function o(l) { let s = c[l]; if (s) { let d = `<div class='w-100 h-100 align-content-center'>${s}</div>`; switch (e.innerHTML = "", l) { case r.Timeout: e.innerHTML = d, document.getElementById("new-qr-button").addEventListener("click", i); break; case r.Scanned: e.innerHTML = d; break; case r.Approved: e.innerHTML = d, n && a(n, 1e4); break; case r.RejectedByUser: case r.RejectedByRequirement: e.innerHTML = d, t && a(t, 1e4); break; default: e.innerHTML = `<p>Unknown state: ${l}</p>` } } }, STATES: r, setOptions: function r(c) { c.qrCodeSelector ? e = document.querySelector(c.qrCodeSelector) : console.error("Not Valid Selector"), c.generateQRCodeFunction && (i = c.generateQRCodeFunction), c.successRedirectURL && (n = c.successRedirectURL), c.failRedirectURL && (t = c.failRedirectURL) } } }(); window.callbackModule = e; let i = function () {
        let e = { "Content-Type": "application/json" }, i = "x-api-key", n = { POST: "POST", GET: "GET" }, t = { WaitingForScan: "WaitingForScan", Timeout: "Timeout", Scanned: "Scanned", Approved: "Approved", RejectedByUser: "RejectedByUser", RejectedByRequirement: "RejectedByRequirement" }, r = null, c = null, a = null, o = null, l = "https://api.chainit.online", s = null, d = null, u = null, f = null, R = null, S = null, g = (i, t, r, c = []) => { let a = { method: t, headers: { ...e, ...c } }; return t === n.POST && (a.body = JSON.stringify(r)), fetch(i, a).then(e => e.json()).then(e => e).catch(e => { console.error(e) }) }, p = e => { if (!e.apiKey) throw Error("apiKey is required"); if (!e.qrContainerSelector) throw Error("qrContainerSelector is required"); if (!e.onVerificationSuccess) throw Error("onVerificationSuccess is required"); if (!e.onVerificationFailure) throw Error("onVerificationFailure is required"); if (!e.onVerificationScanning) throw Error("onVerificationScanning is required"); if (!e.onVerificationRejectedByUser) throw Error("onVerificationRejectedByUser is required"); if (!e.onVerificationRejectedByRequirements) throw Error("onVerificationRejectedByRequirements is required"); if (!e.onVerificationTimeout) throw Error("onVerificationTimeout is required"); if (!(o = document.querySelector(e.qrContainerSelector))) throw Error("qrContainerSelector is invalid") }, y = e => { c = e.apiKey, s = e.onVerificationSuccess, d = e.onVerificationFailure, u = e.onVerificationScanning, f = e.onVerificationRejectedByUser, R = e.onVerificationRejectedByRequirements, S = e.onVerificationTimeout, a = e.qrContainerSelector, o = document.querySelector(e.qrContainerSelector), e.apiBaseUrl && (l = e.apiBaseUrl) }, h = () => { if (!c || !a) throw Error("You must call configure() before calling this method") }, m = (e, i) => {
            /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent); let n = `
            <div class="w-100 h-100" id="qr-code" style="cursor:pointer; text-align: center;">
                <img src="${e}" style="width:100%;height:100%;" alt="Age Verification QR Code" />
            </div>
        `; o.innerHTML = n, document.getElementById("qr-code").addEventListener("click", () => { window.open(i, "_blank") })
        }, q = e => `${l}${e}`, v = e => { p(e), y(e) }, T = () => { r && clearInterval(r) }, b = e => { if (e !== t.WaitingForScan) { if (e === t.Approved && s) s(); else if (e === t.Scanned && u) { u(); return } else e === t.RejectedByUser && f ? f() : e === t.RejectedByRequirement && R ? R() : e === t.Timeout && S ? S() : d(); T() } }, U = e => { T(), r = setInterval(async () => { h(), await g(e, n.GET, {}, { [i]: c }).then(e => { console.log(e), e && e.scanningState ? b(e.scanningState) : e && e.error && b("") }).catch(e => { throw b(""), e }) }, 1e4) }, V = () => { h(), g(`${q("/users/v1/age-verification")}`, n.POST, {}, { [i]: c }).then(e => { m(e.qrCodeUrl, e.deepLink), U(e.qrCodeStatusCheckUrl) }) }; return { configure: v, generateQRCode: V }
    }(); window.bitAgeVerification = i; let n = (() => { let e = document.currentScript, i = e.src, n = new URL(i).searchParams; return { apiKey: n.get("apiKey"), successURL: n.get("successURL"), failureURL: n.get("failureURL"), notificationURL: n.get("notificationURL") } })(); if (console.log({ queryParams: n }), !n.apiKey) { console.log("apiKey is required paramater to generate the QR code, please make sure it is passed in the parameters"); return } try { window.bitAgeVerification.configure({ apiKey: n.apiKey, qrContainerSelector: "#bit-age-verification-qr", onVerificationSuccess: function () { console.log("Verification success"), window.callbackModule._handleState(window.callbackModule.STATES.Approved) }, onVerificationFailure: function () { window.callbackModule._handleState(window.callbackModule.STATES.Timeout), console.log("Verification failure") }, onVerificationScanning: function () { console.log("Scanning QR code"), window.callbackModule._handleState(window.callbackModule.STATES.Scanned) }, onVerificationRejectedByUser: function () { console.log("Rejected by User"), window.callbackModule._handleState(window.callbackModule.STATES.RejectedByUser) }, onVerificationRejectedByRequirements: function () { console.log("Rejected by Requirements"), window.callbackModule._handleState(window.callbackModule.STATES.RejectedByRequirement) }, onVerificationTimeout: function () { console.log("QR expired, generate a new QR code"), window.callbackModule._handleState(window.callbackModule.STATES.Timeout) } }), window.bitAgeVerification.generateQRCode(), window.callbackModule.setOptions({ qrCodeSelector: "#bit-age-verification-qr", generateQRCodeFunction: () => window.bitAgeVerification.generateQRCode(), successRedirectURL: n.successURL, failRedirectURL: n.failureURL }) } catch (t) { console.log(t) }
}();